<?xml version="1.0" encoding="UTF-8"?>
<job>
  <name>bGiornalieraRendimenti</name>
  <description />
  <extended_description />
  <job_version />
  <job_status>0</job_status>
  <directory>/</directory>
  <created_user>-</created_user>
  <created_date>2018/09/14 16:15:01.306</created_date>
  <modified_user>-</modified_user>
  <modified_date>2018/09/14 16:15:01.306</modified_date>
  <parameters>
    </parameters>
  <slaveservers>
    </slaveservers>
  <job-log-table>
    <connection />
    <schema />
    <table>job_log_table</table>
    <size_limit_lines>4000</size_limit_lines>
    <interval />
    <timeout_days />
    <field>
      <id>ID_JOB</id>
      <enabled>Y</enabled>
      <name>ID_JOB</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>JOBNAME</name>
    </field>
    <field>
      <id>STATUS</id>
      <enabled>Y</enabled>
      <name>STATUS</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>STARTDATE</id>
      <enabled>Y</enabled>
      <name>STARTDATE</name>
    </field>
    <field>
      <id>ENDDATE</id>
      <enabled>Y</enabled>
      <name>ENDDATE</name>
    </field>
    <field>
      <id>LOGDATE</id>
      <enabled>Y</enabled>
      <name>LOGDATE</name>
    </field>
    <field>
      <id>DEPDATE</id>
      <enabled>Y</enabled>
      <name>DEPDATE</name>
    </field>
    <field>
      <id>REPLAYDATE</id>
      <enabled>Y</enabled>
      <name>REPLAYDATE</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>EXECUTING_SERVER</id>
      <enabled>N</enabled>
      <name>EXECUTING_SERVER</name>
    </field>
    <field>
      <id>EXECUTING_USER</id>
      <enabled>N</enabled>
      <name>EXECUTING_USER</name>
    </field>
    <field>
      <id>START_JOB_ENTRY</id>
      <enabled>Y</enabled>
      <name>START_JOB_ENTRY</name>
    </field>
    <field>
      <id>CLIENT</id>
      <enabled>N</enabled>
      <name>CLIENT</name>
    </field>
  </job-log-table>
  <jobentry-log-table>
    <connection />
    <schema />
    <table>job_entry_log_table</table>
    <timeout_days />
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>JOBNAME</id>
      <enabled>Y</enabled>
      <name>TRANSNAME</name>
    </field>
    <field>
      <id>JOBENTRYNAME</id>
      <enabled>Y</enabled>
      <name>STEPNAME</name>
    </field>
    <field>
      <id>LINES_READ</id>
      <enabled>Y</enabled>
      <name>LINES_READ</name>
    </field>
    <field>
      <id>LINES_WRITTEN</id>
      <enabled>Y</enabled>
      <name>LINES_WRITTEN</name>
    </field>
    <field>
      <id>LINES_UPDATED</id>
      <enabled>Y</enabled>
      <name>LINES_UPDATED</name>
    </field>
    <field>
      <id>LINES_INPUT</id>
      <enabled>Y</enabled>
      <name>LINES_INPUT</name>
    </field>
    <field>
      <id>LINES_OUTPUT</id>
      <enabled>Y</enabled>
      <name>LINES_OUTPUT</name>
    </field>
    <field>
      <id>LINES_REJECTED</id>
      <enabled>Y</enabled>
      <name>LINES_REJECTED</name>
    </field>
    <field>
      <id>ERRORS</id>
      <enabled>Y</enabled>
      <name>ERRORS</name>
    </field>
    <field>
      <id>RESULT</id>
      <enabled>Y</enabled>
      <name>RESULT</name>
    </field>
    <field>
      <id>NR_RESULT_ROWS</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_ROWS</name>
    </field>
    <field>
      <id>NR_RESULT_FILES</id>
      <enabled>Y</enabled>
      <name>NR_RESULT_FILES</name>
    </field>
    <field>
      <id>LOG_FIELD</id>
      <enabled>Y</enabled>
      <name>LOG_FIELD</name>
    </field>
    <field>
      <id>COPY_NR</id>
      <enabled>Y</enabled>
      <name>COPY_NR</name>
    </field>
  </jobentry-log-table>
  <channel-log-table>
    <connection />
    <schema />
    <table>logging_channel_log_table</table>
    <timeout_days />
    <field>
      <id>ID_BATCH</id>
      <enabled>Y</enabled>
      <name>ID_BATCH</name>
    </field>
    <field>
      <id>CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>CHANNEL_ID</name>
    </field>
    <field>
      <id>LOG_DATE</id>
      <enabled>Y</enabled>
      <name>LOG_DATE</name>
    </field>
    <field>
      <id>LOGGING_OBJECT_TYPE</id>
      <enabled>Y</enabled>
      <name>LOGGING_OBJECT_TYPE</name>
    </field>
    <field>
      <id>OBJECT_NAME</id>
      <enabled>Y</enabled>
      <name>OBJECT_NAME</name>
    </field>
    <field>
      <id>OBJECT_COPY</id>
      <enabled>Y</enabled>
      <name>OBJECT_COPY</name>
    </field>
    <field>
      <id>REPOSITORY_DIRECTORY</id>
      <enabled>Y</enabled>
      <name>REPOSITORY_DIRECTORY</name>
    </field>
    <field>
      <id>FILENAME</id>
      <enabled>Y</enabled>
      <name>FILENAME</name>
    </field>
    <field>
      <id>OBJECT_ID</id>
      <enabled>Y</enabled>
      <name>OBJECT_ID</name>
    </field>
    <field>
      <id>OBJECT_REVISION</id>
      <enabled>Y</enabled>
      <name>OBJECT_REVISION</name>
    </field>
    <field>
      <id>PARENT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>PARENT_CHANNEL_ID</name>
    </field>
    <field>
      <id>ROOT_CHANNEL_ID</id>
      <enabled>Y</enabled>
      <name>ROOT_CHANNEL_ID</name>
    </field>
  </channel-log-table>
  <pass_batchid>N</pass_batchid>
  <shared_objects_file />
  <entries>
    <entry>
      <name>START</name>
      <description />
      <type>SPECIAL</type>
      <attributes />
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>32</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>Success</name>
      <description />
      <type>SUCCESS</type>
      <attributes />
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>2064</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>costi_movimento</name>
      <description />
      <type>JOB</type>
      <attributes />
      <specification_method>filename</specification_method>
      <job_object_id />
      <filename>${Internal.Job.Filename.Directory}/costi_movimento.kjb</filename>
      <jobname />
      <directory />
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile />
      <logext />
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name />
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration />
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1280</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>prezzi_cambi_saldi_rend_causali_movimenti</name>
      <description />
      <type>JOB</type>
      <attributes />
      <specification_method>filename</specification_method>
      <job_object_id />
      <filename>${Internal.Job.Filename.Directory}/prezzi_cambi_saldi_rend_causali_movimenti.kjb</filename>
      <jobname />
      <directory />
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile />
      <logext />
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name />
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration />
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>784</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>create_tmp_indexes</name>
      <description />
      <type>SQL</type>
      <attributes />
      <sql>DECLARE
i 							INTEGER:=0;
check_ix_codice 			INTEGER:=0;
check_ix_tiporapporto		INTEGER:=0;
check_ix_codiceinterno		INTEGER:=0;
check_ix_codicerapporto		INTEGER:=0;
check_ix_g_codicerapporto	INTEGER:=0;
check_ix_ndg_codicefiscale	INTEGER:=0;

   	BEGIN

		SELECT COUNT(*) INTO check_ix_codice FROM USER_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODICE' and TABLE_OWNER = 'RENDIMPC';
		SELECT COUNT(*) INTO check_ix_tiporapporto FROM USER_INDEXES WHERE INDEX_NAME = 'IX_MOV_TIPORAPP' and TABLE_OWNER = 'RENDIMPC';
		SELECT COUNT(*) INTO check_ix_codiceinterno FROM USER_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODINT' and TABLE_OWNER = 'RENDIMPC';
		SELECT COUNT(*) INTO check_ix_codicerapporto FROM USER_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODRAPP' and TABLE_OWNER = 'RENDIMPC';
		SELECT COUNT(*) INTO check_ix_g_codicerapporto FROM USER_INDEXES WHERE INDEX_NAME = 'IX_MOV_G_CODRAPP' and TABLE_OWNER = 'RENDIMPC';
		SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAPPORTO_PZ1') and TABLE_OWNER = 'RENDIMPC';
		SELECT COUNT(*) INTO check_ix_ndg_codicefiscale FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_NDG_CODICEFISCALE') and TABLE_OWNER = 'RENDIMPC';

	   	IF check_ix_codice = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX RENDIMPC.IX_MOV_CODICE ON RENDIMPC.TMP_PFMOVIMENTI(CODICE) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;
		IF check_ix_tiporapporto = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX RENDIMPC.IX_MOV_TIPORAPP ON RENDIMPC.TMP_PFMOVIMENTI(TIPORAPPORTO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;
		IF check_ix_codiceinterno = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX RENDIMPC.IX_MOV_CODINT ON RENDIMPC.TMP_PFMOVIMENTI(CODICEINTERNO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;
		IF check_ix_codicerapporto = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX RENDIMPC.IX_MOV_CODRAPP ON RENDIMPC.TMP_PFMOVIMENTI(CODICERAPPORTO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;
		IF check_ix_g_codicerapporto = 0 THEN
			EXECUTE IMMEDIATE 'CREATE INDEX RENDIMPC.IX_MOV_G_CODRAPP ON RENDIMPC.TMP_PFMOVIMENTI(GENERATED_CODICERAPPORTO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;
		IF i = 0 THEN
		EXECUTE IMMEDIATE 'create index RENDIMPC.IX_RAPPORTO_PZ1 on RENDIMPC.RAPPORTO (codicerapporto, tipo) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		EXECUTE IMMEDIATE 'alter index RENDIMPC.IX_RAPPORTO_PZ1 noparallel';
		END IF;

		SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAP_SALDIREND') and TABLE_OWNER = 'RENDIMPC';
		IF i = 0 THEN
		EXECUTE IMMEDIATE 'create index RENDIMPC.IX_RAP_SALDIREND on RENDIMPC.RAPPORTO (CODICERAPPORTO,CODICEBANCA,TIPO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		EXECUTE IMMEDIATE 'alter index RENDIMPC.IX_RAP_SALDIREND noparallel';
		END IF;

		SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAP_SALDIREND2') and TABLE_OWNER = 'RENDIMPC';
		IF i = 0 THEN
		EXECUTE IMMEDIATE 'create index RENDIMPC.IX_RAP_SALDIREND2 on RENDIMPC.RAPPORTO (id_buono_originario,CODICEBANCA,TIPO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		EXECUTE IMMEDIATE 'alter index RENDIMPC.IX_RAP_SALDIREND2 noparallel';
		END IF;

		SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_TMP_PFSALDISTORICI') and TABLE_OWNER = 'RENDIMPC';
		IF i = 0 THEN
		EXECUTE IMMEDIATE 'create index RENDIMPC.IX_TMP_PFSALDISTORICI on RENDIMPC.TMP_PFSALDISTORICI (CODICERAPPORTO,CODICEINTERNO,DATASALDO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;

		SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_TMP_PFSALDISTORICI2') and TABLE_OWNER = 'RENDIMPC';
		IF i = 0 THEN
		EXECUTE IMMEDIATE 'create index RENDIMPC.IX_TMP_PFSALDISTORICI2 on RENDIMPC.TMP_PFSALDISTORICI (id_buono_originario,CODICEINTERNO,DATASALDO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		END IF;

		select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IX_MOVIMENTO_NUMREG_ONLY') and table_owner = 'RENDIMPC';                        
		if (i = 0) then
		execute immediate 'CREATE INDEX RENDIMPC.IX_MOVIMENTO_NUMREG_ONLY ON RENDIMPC.MOVIMENTO (NUMREG) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		execute immediate 'ALTER INDEX RENDIMPC.IX_MOVIMENTO_NUMREG_ONLY NOPARALLEL';
		end if;

		select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IX_NDG_CODICEFISCALE') and table_owner = 'RENDIMPC';                        
		if (i = 0) then
		execute immediate 'CREATE INDEX RENDIMPC.IX_NDG_CODICEFISCALE ON RENDIMPC.NDG(CODICEFISCALE) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		end if;
		
		select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IDX_ID_S_REND_SOTT_GP') and table_owner = 'RENDIMPC';                        
		if (i = 0) then
		execute immediate 'CREATE INDEX RENDIMPC.IDX_ID_S_REND_SOTT_GP ON RENDIMPC.SALDO_REND_SOTT_GP(PORTAFOGLIO_ID, ID_RAPPORTO) parallel 8 nologging INITRANS 8 TABLESPACE TBS_RENDIMPC_IDX_TEMP';
		end if;

END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename />
      <sendOneStatement>T</sendOneStatement>
      <connection>db-connection</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>336</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>drop_tmp_indexes</name>
      <description />
      <type>SQL</type>
      <attributes />
      <sql>DECLARE
i 							INTEGER:=0;
check_ix_codice 			INTEGER:=0;
check_ix_tiporapporto		INTEGER:=0;
check_ix_codiceinterno		INTEGER:=0;
check_ix_codicerapporto		INTEGER:=0;
check_ix_g_codicerapporto	INTEGER:=0;
				
BEGIN
	SELECT COUNT(*) INTO check_ix_codice FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODICE' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_tiporapporto FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_TIPORAPP' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_codiceinterno FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODINT' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_codicerapporto FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODRAPP' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_g_codicerapporto FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_G_CODRAPP' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAPPORTO_PZ1') and TABLE_OWNER = 'RENDIMPC';
				
	IF check_ix_codice = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_CODICE';
	END IF;
	IF check_ix_tiporapporto = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_TIPORAPP';
	END IF;
	IF check_ix_codiceinterno = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_CODINT';
	END IF;
	IF check_ix_codicerapporto = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_CODRAPP';
	END IF;
	IF check_ix_g_codicerapporto = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_G_CODRAPP';
	END IF;
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'drop index RENDIMPC.IX_RAPPORTO_PZ1';
	END IF;

	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAP_SALDIREND') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_RAP_SALDIREND';
	END IF;
				
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAP_SALDIREND2') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_RAP_SALDIREND2';
	END IF;
				
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_TMP_PFSALDISTORICI') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_TMP_PFSALDISTORICI';
	END IF;
				
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_TMP_PFSALDISTORICI2') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_TMP_PFSALDISTORICI2';
	END IF;

	select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IX_NDG_CODICEFISCALE') and table_owner = 'RENDIMPC';                        
	if (i = 1) then
	execute immediate 'DROP INDEX RENDIMPC.IX_NDG_CODICEFISCALE';
	end if;
	
	select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IDX_ID_S_REND_SOTT_GP') and table_owner = 'RENDIMPC';                        
	if (i = 1) then
	execute immediate 'DROP INDEX RENDIMPC.IDX_ID_S_REND_SOTT_GP';
	end if;
				
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename />
      <sendOneStatement>T</sendOneStatement>
      <connection>db-connection</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1456</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>drop_indexes_enable_constraint_ KO</name>
      <description />
      <type>SQL</type>
      <attributes />
      <sql>DECLARE

i 							INTEGER:=0;
check_ix_codice 			INTEGER:=0;
check_ix_tiporapporto		INTEGER:=0;
check_ix_codiceinterno		INTEGER:=0;
check_ix_codicerapporto		INTEGER:=0;
check_ix_g_codicerapporto	INTEGER:=0;
	
			
BEGIN

	SELECT COUNT(*) INTO check_ix_codice FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODICE' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_tiporapporto FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_TIPORAPP' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_codiceinterno FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODINT' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_codicerapporto FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_CODRAPP' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO check_ix_g_codicerapporto FROM ALL_INDEXES WHERE INDEX_NAME = 'IX_MOV_G_CODRAPP' and TABLE_OWNER = 'RENDIMPC';
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAPPORTO_PZ1') and TABLE_OWNER = 'RENDIMPC';
				
	IF check_ix_codice = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_CODICE';
	END IF;
	IF check_ix_tiporapporto = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_TIPORAPP';
	END IF;
	IF check_ix_codiceinterno = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_CODINT';
	END IF;
	IF check_ix_codicerapporto = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_CODRAPP';
	END IF;
	IF check_ix_g_codicerapporto = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOV_G_CODRAPP';
	END IF;
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'drop index RENDIMPC.IX_RAPPORTO_PZ1';
	END IF;

	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAP_SALDIREND') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_RAP_SALDIREND';
	END IF;
				
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_RAP_SALDIREND2') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_RAP_SALDIREND2';
	END IF;
				
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_TMP_PFSALDISTORICI') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_TMP_PFSALDISTORICI';
	END IF;
				
	SELECT COUNT(*) INTO i FROM ALL_INDEXES WHERE upper(INDEX_NAME) = upper('IX_TMP_PFSALDISTORICI2') and TABLE_OWNER = 'RENDIMPC';
	IF i = 1 THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_TMP_PFSALDISTORICI2';
	END IF;

	select count(*) into i from ALL_INDEXES where index_name = 'IX_RAPPORTO_IDTIPO' and table_owner = 'RENDIMPC';                        
	if (i != 0) then
		execute immediate 'DROP INDEX RENDIMPC.IX_RAPPORTO_IDTIPO';
	end if;

	select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IX_MOVIMENTO_NUMREG_ONLY') and table_owner = 'RENDIMPC';                        
	if (i = 1) then
	execute immediate 'DROP INDEX RENDIMPC.IX_MOVIMENTO_NUMREG_ONLY';
	end if;

	select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IX_NDG_CODICEFISCALE') and table_owner = 'RENDIMPC';                        
	if (i = 1) then
	execute immediate 'DROP INDEX RENDIMPC.IX_NDG_CODICEFISCALE';
	end if;
	
	select count(*) into i from ALL_INDEXES where upper(INDEX_NAME) = upper('IDX_ID_S_REND_SOTT_GP') and table_owner = 'RENDIMPC';                        
	if (i = 1) then
	execute immediate 'DROP INDEX RENDIMPC.IDX_ID_S_REND_SOTT_GP';
	end if;

	select count(*) into i from CONFIGINI where CODICE = 'BATCHGIORNALIERO_ENABLE_CONSTRAINT' AND VALORE = 'NOVALIDATE';

	if (i = 1) then
	
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.COSTO_MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_COSTO_MOVIM_TIPO_COSTO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_MOVIMENTO_CAUSALE';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_MOVIMENTO_CODICETITOLO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_MOVIMENTO_RAPPORTO';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_MOVIMENTO_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE NOVALIDATE CONSTRAINT FK_SALDO_REND_PORTAFOGLIO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE NOVALIDATE CONSTRAINT FK_SALDO_REND_STRUMENTOFINANZI';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_SALDO_REND_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_PK_COSTO_MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'alter table RENDIMPC.COSTO_MOVIMENTO logging';
	
	else 

	
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.COSTO_MOVIMENTO ENABLE CONSTRAINT FK_COSTO_MOVIM_TIPO_COSTO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE CONSTRAINT FK_MOVIMENTO_CAUSALE';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE CONSTRAINT FK_MOVIMENTO_CODICETITOLO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE CONSTRAINT FK_MOVIMENTO_RAPPORTO';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_MOVIMENTO_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE CONSTRAINT FK_SALDO_REND_PORTAFOGLIO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE CONSTRAINT FK_SALDO_REND_STRUMENTOFINANZI';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_SALDO_REND_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_PK_COSTO_MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'alter table RENDIMPC.COSTO_MOVIMENTO logging';

	END IF;
			
END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename />
      <sendOneStatement>T</sendOneStatement>
      <connection>db-connection</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1056</xloc>
      <yloc>272</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>movimenti_polizze_fondi</name>
      <description />
      <type>JOB</type>
      <attributes />
      <specification_method>filename</specification_method>
      <job_object_id />
      <filename>${Internal.Entry.Current.Directory}/movinc_movpag_polizze.kjb</filename>
      <jobname />
      <directory />
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile />
      <logext />
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name />
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration>Pentaho local</run_configuration>
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1056</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>enable_constraint</name>
      <description />
      <type>SQL</type>
      <attributes />
      <sql>DECLARE

	I 		INTEGER:=0;


BEGIN

	SELECT COUNT(*) INTO I FROM all_indexes WHERE UPPER(index_name) = UPPER('IX_MOVIMENTO_NUMREG_ONLY') AND table_owner = 'RENDIMPC';                        
		IF (I = 1) THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_MOVIMENTO_NUMREG_ONLY';
		END IF;

	--execute immediate 'alter table COSTO_MOVIMENTO parallel 1';
	
	SELECT COUNT(*) INTO I FROM all_indexes WHERE index_name = 'IX_RAPPORTO_IDTIPO' AND table_owner = 'RENDIMPC';                        
	IF (I != 0) THEN
		EXECUTE IMMEDIATE 'DROP INDEX RENDIMPC.IX_RAPPORTO_IDTIPO';
	END IF;


	SELECT COUNT(*) INTO I FROM configini WHERE codice = 'BATCHGIORNALIERO_ENABLE_CONSTRAINT' AND valore = 'NOVALIDATE';

	IF (I = 1) THEN
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.COSTO_MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_COSTO_MOVIM_TIPO_COSTO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_MOVIMENTO_CAUSALE';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_MOVIMENTO_CODICETITOLO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE NOVALIDATE CONSTRAINT FK_MOVIMENTO_RAPPORTO';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_MOVIMENTO_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE NOVALIDATE CONSTRAINT FK_SALDO_REND_PORTAFOGLIO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE NOVALIDATE CONSTRAINT FK_SALDO_REND_STRUMENTOFINANZI';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_SALDO_REND_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_PK_COSTO_MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.COSTO_MOVIMENTO LOGGING';
	
	ELSE 

	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.COSTO_MOVIMENTO ENABLE CONSTRAINT FK_COSTO_MOVIM_TIPO_COSTO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE CONSTRAINT FK_MOVIMENTO_CAUSALE';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE CONSTRAINT FK_MOVIMENTO_CODICETITOLO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO ENABLE CONSTRAINT FK_MOVIMENTO_RAPPORTO';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_MOVIMENTO_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE CONSTRAINT FK_SALDO_REND_PORTAFOGLIO';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND ENABLE CONSTRAINT FK_SALDO_REND_STRUMENTOFINANZI';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'ALTER TABLE RENDIMPC.SALDO_REND LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_SALDO_REND_PK LOGGING';
	EXECUTE IMMEDIATE 'ALTER INDEX RENDIMPC.IDX_PK_COSTO_MOVIMENTO LOGGING';
	EXECUTE IMMEDIATE 'alter table RENDIMPC.COSTO_MOVIMENTO logging';

	END IF;

END;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename />
      <sendOneStatement>T</sendOneStatement>
      <connection>db-connection</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1936</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>create_parallel_function</name>
      <description />
      <type>JOB</type>
      <attributes />
      <specification_method>filename</specification_method>
      <job_object_id />
      <filename>${Internal.Job.Filename.Directory}/create_parallel_function.kjb</filename>
      <jobname />
      <directory />
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <set_logfile>N</set_logfile>
      <logfile />
      <logext />
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Nothing</loglevel>
      <slave_server_name />
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <expand_remote_job>N</expand_remote_job>
      <create_parent_folder>N</create_parent_folder>
      <pass_export>N</pass_export>
      <run_configuration />
      <parameters>
        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>
      <set_append_logfile>N</set_append_logfile>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>512</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>drop_pending_indexes</name>
      <description />
      <type>SQL</type>
      <attributes />
      <sql />
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>T</sqlfromfile>
      <sqlfilename>${Internal.Job.Filename.Directory}/sql/drop_pending_indexes.sql</sqlfilename>
      <sendOneStatement>T</sendOneStatement>
      <connection>db-connection</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>160</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
    <entry>
      <name>merge_costi_mov_mantenimento_update</name>
      <description />
      <type>SQL</type>
      <attributes />
      <sql />
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>T</sqlfromfile>
      <sqlfilename>${Internal.Job.Filename.Directory}/sql/merge_costi_mov_mantenimento_update.sql</sqlfilename>
      <sendOneStatement>T</sendOneStatement>
      <connection>db-connection</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>1696</xloc>
      <yloc>112</yloc>
      <attributes_kjc />
    </entry>
  </entries>
  <hops>
    <hop>
      <from>prezzi_cambi_saldi_rend_causali_movimenti</from>
      <to>drop_indexes_enable_constraint_ KO</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>prezzi_cambi_saldi_rend_causali_movimenti</from>
      <to>movimenti_polizze_fondi</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>movimenti_polizze_fondi</from>
      <to>drop_indexes_enable_constraint_ KO</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>enable_constraint</from>
      <to>Success</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>costi_movimento</from>
      <to>drop_indexes_enable_constraint_ KO</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>N</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>create_parallel_function</from>
      <to>prezzi_cambi_saldi_rend_causali_movimenti</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>create_tmp_indexes</from>
      <to>create_parallel_function</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>drop_pending_indexes</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>drop_pending_indexes</from>
      <to>create_tmp_indexes</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>merge_costi_mov_mantenimento_update</from>
      <to>enable_constraint</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>movimenti_polizze_fondi</from>
      <to>costi_movimento</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>costi_movimento</from>
      <to>drop_tmp_indexes</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>drop_tmp_indexes</from>
      <to>merge_costi_mov_mantenimento_update</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
  </notepads>
  <attributes>
    <group>
      <name>METASTORE.pentaho</name>
      <attribute>
        <key>Default Run Configuration</key>
        <value>{"namespace":"pentaho","id":"Default Run Configuration","name":"Default Run Configuration","description":"Defines a default run configuration","metaStoreName":null}</value>
      </attribute>
    </group>
    <group>
      <name>{"_":"Embedded MetaStore Elements","namespace":"pentaho","type":"Default Run Configuration"}</name>
      <attribute>
        <key>Pentaho local</key>
        <value>{"children":[{"children":[],"id":"server","value":null},{"children":[],"id":"clustered","value":"N"},{"children":[],"id":"name","value":"Pentaho local"},{"children":[],"id":"description","value":null},{"children":[],"id":"pentaho","value":"N"},{"children":[],"id":"readOnly","value":"Y"},{"children":[],"id":"sendResources","value":"N"},{"children":[],"id":"logRemoteExecutionLocally","value":"N"},{"children":[],"id":"remote","value":"N"},{"children":[],"id":"local","value":"Y"},{"children":[],"id":"showTransformations","value":"N"}],"id":"Pentaho local","value":null,"name":"Pentaho local","owner":null,"ownerPermissionsList":[]}</value>
      </attribute>
    </group>
  </attributes>
</job>
